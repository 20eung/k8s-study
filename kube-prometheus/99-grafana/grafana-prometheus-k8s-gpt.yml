/*
 ConfigMap을 생성하는 부분입니다. 
 ConfigMap은 Kubernetes에서 설정 파일을 관리하는 방법 중 하나입니다. 
 이 ConfigMap에는 Grafana에서 Prometheus를 데이터 소스로 사용하기 위한 설정이 포함되어 있습니다.

 grafana의 데이터 소스를 위한 ConfigMap을 생성합니다. 
 여기서 설정된 prometheus 서비스의 url을 자신의 설정에 맞게 변경해야합니다.
*/

# 이 ConfigMap이 어떤 API 버전을 사용하는지를 나타냅니다.
apiVersion: v1

# 이 오브젝트가 어떤 종류의 오브젝트인지를 나타냅니다. 
# 이 코드에서는 ConfigMap을 사용합니다.
kind: ConfigMap

# 이 ConfigMap에 대한 정보를 제공합니다.
# 이름과 라벨(태그)을 정의합니다.
metadata:

  # ConfigMap의 이름을 정의합니다. 
  # 이 이름은 후에 다른 오브젝트와 연결할 때 사용됩니다.
  name: grafana-datasources

  # ConfigMap에 키-값 쌍으로 라벨을 정의합니다. 
  # 이 라벨은 후에 다른 오브젝트를 그룹핑 할 때 사용됩니다.
  labels:
    app: grafana

# ConfigMap에 포함될 설정 파일의 이름과 내용이 정의됩니다.
# 이 코드에서는 prometheus.yaml라는 이름의 파일을 생성하고 있으며, 
# 그 내용은 Grafana가 Prometheus를 데이터 소스로 사용하기 위한 설정입니다.    
data:

  # 이 파일의 이름을 정의합니다.
  prometheus.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus-service:9090
        isDefault: true # prometheus를 default data-source로 설정
---
/*
 Deployment를 생성하는 부분입니다. 
 Deployment는 Pod를 생성하고 유지 관리하는 방법 중 하나입니다. 
 이 Deployment에는 Grafana 컨테이너를 생성하는 설정이 포함되어 있으며, 
 ConfigMap에서 설정한 Prometheus를 데이터 소스로 사용하기 위해 필요한 설정이 포함되어 있습니다.

 grafana pod를 생성합니다.
 - 이미지는 grafana/grafana를 사용하며, 
 - 포트는 3000으로 설정되어있으며, 
 - admin/admin을 사용합니다.

*/

# 이 Deployment가 어떤 API 버전을 사용하는지를 나타냅니다.
apiVersion: apps/v1

# 이 오브젝트가 어떤 종류의 오브젝트인지를 나타냅니다. 
kind: Deployment

# Deployment에 대한 정보를 제공합니다.
# name은 Deployment 이름을 정의하며, 
# labels는 이 Deployment을 구분하기 위한 태그를 정의합니다.
metadata:
  name: grafana
  labels:
    app: grafana

# Deployment의 세부 정보를 정의합니다.
spec:
  # Deployment가 생성할 Pod의 개수를 정의합니다.
  replicas: 1

  # Deployment가 관리할 Pod를 선택하는 방법을 정의합니다. 
  selector:
    # Pod의 라벨을 기준으로 선택합니다.
    matchLabels:
      app: grafana

  # Deployment가 생성할 Pod에 대한 정보를 정의합니다.
  template:
    # Pod에 대한 메타데이터를 정의합니다.
    metadata:
      labels:
        app: grafana

    # Pod의 세부 정보를 정의합니다.
    spec:
      containers:
        - name: grafana
          image: grafana/grafana
          ports:
            - name: http
              containerPort: 3000
          env:
            - name: GF_SECURITY_ADMIN_USER
              value: admin
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: admin
          # 컨테이너는 "grafana-datasources"라는 이름의 볼륨 마운트를 가지고 있으며,
          # "/etc/grafana/provisioning/datasources" 경로에 마운트됩니다.
          volumeMounts:
            - name: grafana-datasources
              mountPath: /etc/grafana/provisioning/datasources
      # Pod은 "grafana-datasources"라는 이름의 볼륨을 포함하며,
      # "grafana-datasources"라는 이름의 configMap입니다.
      volumes:
        - name: grafana-datasources
          configMap:
            name: grafana-datasources
---
/*
 Service를 생성하는 부분입니다. 
 Service는 Pod들에 대해서 일관된 IP 주소를 가지고 접근 가능하도록 해주는 기능 중 하나입니다. 
 이 Service는 Grafana Pod에 대한 접근을 제공하며, 포트 3000으로 설정되어 있습니다.
*/
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  labels:
    app: grafana
spec:
  selector:
    app: grafana
  ports:
    - name: http
      port: 3000
      targetPort: 3000
  type: ClusterIP
